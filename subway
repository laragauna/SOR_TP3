#include <stdio.h>      // libreria estandar
#include <stdlib.h>     // para usar exit y funciones de la libreria standard
#include <string.h>
#include <pthread.h>    // para usar threads
#include <semaphore.h>  // para usar semaforos
#include <unistd.h>



#define LIMITE 50

//creo estructura de semaforos
struct semaforos {
   sem_t sem_mezclar;
   sem_t sem_cortar;
   sem_t sem_salar; //exclusivo
   sem_t sem_agregarCarne;
   sem_t sem_empanar;
   sem_t sem_freir; //exclusivo
   sem_t sem_hornear; //exclusivo
   sem_t sem_cortarVerdura;
   sem_t sem_armar;

};

//creo los pasos con los ingredientes  ESTRUCTURA DE CADA PASO
struct paso {
   char accion [LIMITE];
   char ingredientes[4][LIMITE];

};

//creo los parametros de los hilos
struct parametro {
 int equipo_param;
 struct semaforos semaforos_param;
 struct paso pasos_param[9];  //era de 8 posiciones, agregue una mas (9) para la accion de cortar verduras
};

//funcion para imprimir las acciones y los ingredientes de la accion
void* imprimirAccion(void *data, char *accionIn) {
	struct parametro *mydata = data;
	//calculo la longitud del array de pasos
	int sizeArray = (int)( sizeof(mydata->pasos_param) / sizeof(mydata->pasos_param[0]));
	//indice para recorrer array de pasos
	int i;
	for(i = 0; i < sizeArray; i ++){
		//pregunto si la accion del array es igual a la pasada por parametro (si es igual la funcion strcmp devuelve cero)
		if(strcmp(mydata->pasos_param[i].accion, accionIn) == 0){
		printf("\tEquipo %d - accion %s \n " , mydata->equipo_param, mydata->pasos_param[i].accion);
		//calculo la longitud del array de ingredientes
		int sizeArrayIngredientes = (int)( sizeof(mydata->pasos_param[i].ingredientes) / sizeof(mydata->pasos_param[i].ingredientes[0]) );
		//indice para recorrer array de ingredientes
		int h;
		printf("\tEquipo %d -----------ingredientes : ----------\n",mydata->equipo_param); 
			for(h = 0; h < sizeArrayIngredientes; h++) {
				//consulto si la posicion tiene valor porque no se cuantos ingredientes tengo por accion 
				if(strlen(mydata->pasos_param[i].ingredientes[h]) != 0) {
							printf("\tEquipo %d ingrediente  %d : %s \n",mydata->equipo_param,h,mydata->pasos_param[i].ingredientes[h]);
				}
			}
		}
	}
}

//mas funciones:


//funcion para tomar de ejemplo
void* cortar(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "cortar";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
sem_wait(&mydata->semaforos_param.sem_cortar);

	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );
	//doy la señal a la siguiente accion (cortar me habilita mezclar)  //ASI SE ORDENAN LAS ACCIONES, Y ME ASEGURO QUE UNA SE HAGA LUEGO DE LA ANTERIOR
    sem_post(&mydata->semaforos_param.sem_mezclar);

//    pthread_exit(NULL);
}

void* mezclar(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "mezclar";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
sem_wait(&mydata->semaforos_param.sem_mezclar);

	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );
	//doy la señal a la siguiente accion (cortar me habilita salar)  //ASI SE ORDENAN LAS ACCIONES, Y ME ASEGURO QUE UNA SE HAGA LUEGO DE LA ANTERIOR
    sem_post(&mydata->semaforos_param.sem_salar);

//   pthread_exit(NULL);
}

void* salar(void *data) {
        //creo el nombre de la accion de la funcion
        char *accion = "salar";
        //creo el puntero para pasarle la referencia de memoria (data) del struct pasado por para$
        struct parametro *mydata = data;
        sem_wait(&mydata->semaforos_param.sem_salar);
        //llamo a la funcion imprimir le paso el struct y la accion de la funcion
        imprimirAccion(mydata,accion);
        //uso sleep para simular que que pasa tiempo
        usleep( 20000 );
        //doy la señal a la siguiente accion (salar me habilita agregarCarne)  //ASI SE ORDENAN LAS ACC$
    sem_post(&mydata->semaforos_param.sem_agregarCarne);
    sem_post(&mydata->semaforos_param.sem_salar);

  // pthread_exit(NULL);
}


void* agregarCarne(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "agregar carne";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
sem_wait(&mydata->semaforos_param.sem_agregarCarne);

	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );
	//doy la señal a la siguiente accion (agregar carne me habilita empanar)  //ASI SE ORDENAN LAS ACCIONES, Y ME ASEGURO QUE UNA SE HAGA LUEGO DE LA ANTERIOR
    sem_post(&mydata->semaforos_param.sem_empanar);

    //pthread_exit(NULL);
}

void* empanar(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "empanar";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
sem_wait(&mydata->semaforos_param.sem_empanar);

	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );
	//doy la señal a la siguiente accion (empanar me habilita freir)  //ASI SE ORDENAN LAS ACCIONES, Y ME ASEGURO QUE UNA SE HAGA LUEGO DE LA ANTERIOR
    sem_post(&mydata->semaforos_param.sem_freir);

    //pthread_exit(NULL);
}

void* freir(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "freir";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
        sem_wait(&mydata->semaforos_param.sem_freir);
	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );
	//doy la señal a la siguiente accion (freir me habilita hornear)  //ASI SE ORDENAN LAS ACCIONES, Y ME ASEGURO QUE UNA SE HAGA LUEGO DE LA ANTERIOR
    sem_post(&mydata->semaforos_param.sem_hornear);
    sem_post(&mydata->semaforos_param.sem_freir);


    //pthread_exit(NULL);
}

void* hornear(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "hornear";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
        sem_wait(&mydata->semaforos_param.sem_hornear); //wait a hornear
	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );
	//doy la señal a la siguiente accion (hornear me habilita cortarVerdura)  //ASI SE ORDENAN LAS ACCIONES, Y ME ASEGURO QUE UNA SE HAGA LUEGO DE LA ANTERIOR
    sem_post(&mydata->semaforos_param.sem_hornear);
    sem_post(&mydata->semaforos_param.sem_cortarVerdura);

    //pthread_exit(NULL);
}

void* cortarVerdura(void *data) {
        //creo el nombre de la accion de la funcion
        char *accion = "cortar verdura";
        //creo el puntero para pasarle la referencia de memoria (data) del struct pasado por para$
        struct parametro *mydata = data;
sem_wait(&mydata->semaforos_param.sem_cortarVerdura);

        //llamo a la funcion imprimir le paso el struct y la accion de la funcion
        imprimirAccion(mydata,accion);
        //uso sleep para simular que que pasa tiempo
        usleep( 20000 );
        //doy la señal a la siguiente accion (empanar me habilita freir)  //ASI SE ORDENAN LAS AC$
    sem_post(&mydata->semaforos_param.sem_armar);

//    pthread_exit(NULL);
}




void* armar(void *data) {
	//creo el nombre de la accion de la funcion
	char *accion = "armar";
	//creo el puntero para pasarle la referencia de memoria (data) del struct pasado por parametro (la cual es un puntero). 
	struct parametro *mydata = data;
sem_wait(&mydata->semaforos_param.sem_armar);

	//llamo a la funcion imprimir le paso el struct y la accion de la funcion
	imprimirAccion(mydata,accion);
	//uso sleep para simular que que pasa tiempo
	usleep( 20000 );

  //  pthread_exit(NULL);
}

void* competir(void *data){
 cortar(data);
 mezclar(data);
 salar (data);
agregarCarne(data);
empanar(data);
freir(data);
hornear(data);
cortarVerdura(data);
armar(data);


pthread_exit(NULL);
}


void* ejecutarReceta(void *i) {

	//variables semaforos
	sem_t sem_mezclar;
    sem_t sem_cortar;
    sem_t sem_salar; //exclusivo
    sem_t sem_agregarCarne;
    sem_t sem_empanar;
    sem_t sem_freir; //exclusivo
    sem_t sem_hornear; //exclusivo
    sem_t sem_cortarVerdura;
    sem_t sem_armar;

	//variables hilos
	pthread_t p1;
        pthread_t p2;
        pthread_t p3;
        pthread_t p4;


	//numero del equipo (casteo el puntero a un int)
	int p = *((int *) i);

	printf("Ejecutando equipo %d \n", p);

	//reservo memoria para el struct
	struct parametro *pthread_data = malloc(sizeof(struct parametro));

	//seteo los valores al struct

	//seteo numero de grupo
	pthread_data->equipo_param = p;

	//seteo semaforos
	pthread_data->semaforos_param.sem_mezclar = sem_mezclar;
    pthread_data->semaforos_param.sem_cortar = sem_cortar;
    pthread_data->semaforos_param.sem_salar = sem_salar;
    pthread_data->semaforos_param.sem_agregarCarne = sem_agregarCarne;
    pthread_data->semaforos_param.sem_empanar = sem_empanar;
    pthread_data->semaforos_param.sem_freir = sem_freir;
    pthread_data->semaforos_param.sem_hornear = sem_hornear;
    pthread_data->semaforos_param.sem_cortarVerdura = sem_cortarVerdura;
    pthread_data->semaforos_param.sem_armar = sem_armar;



	//seteo las acciones y los ingredientes (Faltan acciones e ingredientes) ¿Se ve hardcodeado no? ¿Les parece bien? //LEER DESDE LA RECETA
            strcpy(pthread_data->pasos_param[0].accion, "cortar");
	    strcpy(pthread_data->pasos_param[0].ingredientes[0], "ajo");
            strcpy(pthread_data->pasos_param[0].ingredientes[1], "perejil");

strcpy(pthread_data->pasos_param[1].accion, "mezclar");
strcpy(pthread_data->pasos_param[1].ingredientes[0], "ajo");
strcpy(pthread_data->pasos_param[1].ingredientes[1], "perejil");
strcpy(pthread_data->pasos_param[1].ingredientes[2], "huevo");


strcpy(pthread_data->pasos_param[2].accion, "salar");

strcpy(pthread_data->pasos_param[3].accion, "agregar carne");
strcpy(pthread_data->pasos_param[3].ingredientes[0], "carne");

strcpy(pthread_data->pasos_param[4].accion, "empanar");

strcpy(pthread_data->pasos_param[5].accion, "freir");

strcpy(pthread_data->pasos_param[6].accion, "hornear");

strcpy(pthread_data->pasos_param[7].accion, "cortar verdura");
strcpy(pthread_data->pasos_param[7].ingredientes[0], "lechuga");
strcpy(pthread_data->pasos_param[7].ingredientes[1], "tomate");
strcpy(pthread_data->pasos_param[7].ingredientes[2], "cebolla morada");
strcpy(pthread_data->pasos_param[7].ingredientes[3], "pepino");

strcpy(pthread_data->pasos_param[8].accion, "armar");








//LECTURA DEL ARCHIVO:
//char linea[200];//cantidad maxima de caracteres por linea
//char delimitador[]=",";
//char *token;
//int j=0;
//int k=0;

//FILE *receta;
//receta= fopen("receta.txt", "r"); //abro receta

//while(fgets(linea,200,receta) != NULL){
  // printf("linea: %s \n",linea); //muestra la linea actual
   //hago algo con la linea actual:
  // token= strtok(linea,delimitador);//toma la primera palabra
  // if(token != NULL){
   // strcpy(pthread_data->pasos_param[j].accion,token); //guardo la accion en su paso
//printf("accion: %s \n",pthread_data->pasos_param[j].accion);
   // while(token != NULL){
     // token= strtok(NULL, delimitador);
      // strcpy(pthread_data->pasos_param[j].ingredientes[k],token); //esta guardando ingredientes
   //    printf("ingrediente: %s \n",pthread_data->pasos_param[j].ingredientes[k]);

     // k++; //incremento contador de ingredientes
   // }//fin del while de ingredientes
  // k=0; //reinicia contador
  // j++;
  // }//fin del if
//}//fin del ciclo de lineas
//j=0;
//fclose(receta); //cierra el archivo receta


	//inicializo los semaforos

sem_init(&(pthread_data->semaforos_param.sem_cortar),0,1);  //semaforo contador inicia en 4, ya que los 4 equipos pueden mezclar a la vez
sem_init(&(pthread_data->semaforos_param.sem_mezclar),0,0);  //inicia en 4, ya que los 4 equipos pueden a la vez
sem_init(&(pthread_data->semaforos_param.sem_salar),0,0);  //inicia en 1, ya que solo 1 equipo puede salar por vez
sem_init(&(pthread_data->semaforos_param.sem_agregarCarne),0,0);  //inicia en 4, ya que los 4 equipos pueden a la vez
sem_init(&(pthread_data->semaforos_param.sem_empanar),0,0);  //inicia en 4, ya que los 4 equipos pueden a la ve
sem_init(&(pthread_data->semaforos_param.sem_freir),0,0);  //inicia en 1, ya que solo 1 equipo puede por vez
sem_init(&(pthread_data->semaforos_param.sem_hornear),0,0);  //inicia en 1, ya que solo 1 equipo puede por vez
sem_init(&(pthread_data->semaforos_param.sem_cortarVerdura),0,0);  //inicia en 4, ya que los 4 equipos pueden a la vez
sem_init(&(pthread_data->semaforos_param.sem_armar),0,0);  //inicia en 4, ya que los 4 equipos pueden a la vez


	//creo los hilos a todos les paso el struct creado (el mismo a todos los hilos) ya que todos comparten los semaforos 
    int rc;
    rc = pthread_create(&p1,                           //identificador unico
                            NULL,                          //atributos del thread
                                competir,             //funcion a ejecutar
                                pthread_data);                     //parametros de la funcion a ejecutar, pasado por referencia

    rc = pthread_create(&p2,                           //identificador unico
                            NULL,                          //atributos del thread
                                competir,             //funcion a ejecutar
                                pthread_data);                     //parametros de la funcion a ejecutar, pasado por referencia

    rc = pthread_create(&p3,                           //identificador unico
                            NULL,                          //atributos del thread
                                competir,             //funcion a ejecutar
                                pthread_data);                     //parametros de la funcion a ejecutar, pasado por referencia

    rc = pthread_create(&p4,                           //identificador unico
                            NULL,                          //atributos del thread
                                competir,             //funcion a ejecutar
                                pthread_data);                     //parametros de la funcion a ejecutar, pasado por referencia


	//join de todos los hilos
	pthread_join (p1,NULL);
        pthread_join (p2,NULL);
        pthread_join (p3,NULL);
        pthread_join (p4,NULL);


	//valido que el hilo se alla creado bien
    if (rc){
       printf("Error:unable to create thread, %d \n", rc);
       exit(-1);
     }


	//destruccion de los semaforos
	sem_destroy(&sem_mezclar);
sem_destroy(&sem_cortar);
sem_destroy(&sem_salar);
sem_destroy(&sem_agregarCarne);
sem_destroy(&sem_empanar);
sem_destroy(&sem_freir);
sem_destroy(&sem_hornear);
sem_destroy(&sem_cortarVerdura);
sem_destroy(&sem_armar);

	//salida del hilo
	 pthread_exit(NULL);
}


int main ()
{



	//creo los nombres de los equipos
	int rc;
	int *equipoNombre1 =malloc(sizeof(*equipoNombre1));
	int *equipoNombre2 =malloc(sizeof(*equipoNombre2));
        int *equipoNombre3 =malloc(sizeof(*equipoNombre3));
        int *equipoNombre4 =malloc(sizeof(*equipoNombre4));

	*equipoNombre1 = 1;
	*equipoNombre2 = 2;
        *equipoNombre3 = 3;
        *equipoNombre4 = 4;

	//creo las variables los hilos de los equipos
	pthread_t equipo1;
	pthread_t equipo2;
        pthread_t equipo3;
        pthread_t equipo4;

	//inicializo los hilos de los equipos
    rc = pthread_create(&equipo1,                           //identificador unico
                            NULL,                          //atributos del thread
                                ejecutarReceta,             //funcion a ejecutar
                                equipoNombre1);

    rc = pthread_create(&equipo2,                           //identificador unico
                            NULL,                          //atributos del thread
                                ejecutarReceta,             //funcion a ejecutar
                                equipoNombre2);

    rc = pthread_create(&equipo3,                           //identificador unico
                            NULL,                          //atributos del thread
                                ejecutarReceta,             //funcion a ejecutar
                                equipoNombre3);
    rc = pthread_create(&equipo4,                           //identificador unico
                            NULL,                          //atributos del thread
                                ejecutarReceta,             //funcion a ejecutar
                                equipoNombre4);


   if (rc){
       printf("Error:unable to create thread, %d \n", rc);
       exit(-1);
     }

	//join de todos los hilos
	pthread_join (equipo1,NULL);
	pthread_join (equipo2,NULL);
        pthread_join (equipo3,NULL);
        pthread_join (equipo4,NULL);


    pthread_exit(NULL);
}


